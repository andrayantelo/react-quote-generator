{"version":3,"sources":["apis/simpsons.js","components/QuoteCard.js","actions/index.js","components/App.js","reducers/index.js","index.js"],"names":["axios","create","baseURL","QuoteCard","HandleClick","event","props","getRandomQuote","this","className","id","quote","character","href","onClick","Component","connect","state","dispatch","a","async","simpsons","get","response","type","payload","data","App","combineReducers","action","store","createStore","reducers","applyMiddleware","thunk","ReactDOM","render","document","querySelector"],"mappings":"wSAIeA,E,OAAAA,EAAMC,OAAO,CACxBC,QAHQ,iDCGNC,G,iNACFC,YAAc,SAACC,GACX,EAAKC,MAAMC,kB,mFAIXC,KAAKF,MAAMC,mB,+BAKX,OACI,yBAAKE,UAAU,oBACf,yBAAKA,UAAU,WACf,yBAAKC,GAAG,YAAYD,UAAU,iCAC1B,uBAAGC,GAAG,QACDF,KAAKF,MAAMK,MAAMA,OAEtB,uBAAGD,GAAG,UAAN,KACOF,KAAKF,MAAMK,MAAMC,WAExB,yBAAKH,UAAU,WACX,uBAAGC,GAAG,cAAcG,KAAK,4BAA2B,uBAAGJ,UAAU,kBACjE,4BACIC,GAAG,YACHI,QAASN,KAAKJ,aAFlB,eAQR,yBAAKK,UAAU,8B,GA/BHM,cAyCTC,eAHS,SAACC,GACrB,MAAO,CAAEN,MAAOM,EAAMN,SAItB,CAAEJ,eC5CwB,kBAAM,SAAOW,GAAP,eAAAC,EAAAC,OAAA,kEAAAD,EAAA,MACTE,EAASC,OADA,OAC1BC,EAD0B,OAGhCL,EAAU,CAACM,KALa,eAKOC,QAASF,EAASG,KAAK,KAHtB,wCD0CrBV,CAESb,GErCTwB,EARH,WACR,OACI,yBAAKjB,GAAG,YAAYD,UAAU,0BAC3B,kBAAC,EAAD,QCKImB,cAAgB,CAC3BjB,MARuB,WAAyB,IAAxBA,EAAuB,uDAAf,GAAIkB,EAAW,uCAC/C,MFHwB,iBEGpBA,EAAOL,KACAK,EAAOJ,QAEXd,KCCLmB,EAAQC,YAAYC,EAAUC,YAAgBC,MAEpDC,IAASC,OACL,kBAAC,IAAD,CAAUN,MAAOA,GACb,kBAAC,EAAD,OAEJO,SAASC,cAAc,Y","file":"static/js/main.532fd34d.chunk.js","sourcesContent":["import axios from 'axios';\n\nconst URL = 'https://thesimpsonsquoteapi.glitch.me/quotes';\n\nexport default axios.create({\n    baseURL: URL\n})","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { getRandomQuote } from '../actions';\nimport './QuoteCard.css';\n\nclass QuoteCard extends Component {\n    HandleClick = (event) => {\n        this.props.getRandomQuote();\n    }\n\n    componentDidMount() {\n        this.props.getRandomQuote();\n    }\n\n    \n    render() {\n        return (\n            <div className=\"three column row\">\n            <div className=\"column\"></div>\n            <div id=\"quote-box\" className=\"center aligned column ui card\">\n                <p id=\"text\">\n                    {this.props.quote.quote}\n                </p>\n                <p id=\"author\">\n                    - {this.props.quote.character}\n                </p>\n                <div className=\"options\">\n                    <a id=\"tweet-quote\" href=\"twitter.com/intent/tweet\"><i className=\"twitter icon\"></i></a>\n                    <button \n                        id=\"new-quote\"\n                        onClick={this.HandleClick}\n                    >\n                        New Quote\n                    </button>\n                </div>  \n            </div>\n            <div className=\"right aligned column\"></div>\n            </div>\n            \n        )\n    }\n}\n\nconst mapStateToProps = (state) => {\n    return { quote: state.quote }\n}\nexport default connect(\n    mapStateToProps,\n    { getRandomQuote })(QuoteCard);","import simpsons from '../apis/simpsons';\n\nexport const RANDOM_QUOTE = 'RANDOM_QUOTE';\n\nexport const getRandomQuote = () => async (dispatch) => {\n    const response = await simpsons.get();\n\n    dispatch( {type: RANDOM_QUOTE, payload: response.data[0]})\n}","import React from 'react';\nimport QuoteCard from './QuoteCard';\n\nconst App = () => {\n    return (\n        <div id=\"container\" className=\"ui middle aligned grid\">\n           <QuoteCard />\n        </div>\n    )\n}\n\nexport default App;","import { combineReducers } from 'redux';\nimport { RANDOM_QUOTE } from '../actions';\n\n\nconst randomQuoteReducer = (quote = '', action) => {\n    if (action.type === RANDOM_QUOTE) {\n        return action.payload;\n    }\n    return quote;\n}\n\nexport default combineReducers({\n    quote: randomQuoteReducer\n})","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware } from 'redux';\nimport thunk from 'redux-thunk';\n\nimport App from './components/App';\nimport reducers from './reducers';\n\nconst store = createStore(reducers, applyMiddleware(thunk));\n\nReactDOM.render(\n    <Provider store={store}>\n        <App />\n    </Provider>,\n    document.querySelector('#root')\n);"],"sourceRoot":""}